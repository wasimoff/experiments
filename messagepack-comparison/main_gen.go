package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MyNote) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "msg":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "run":
			z.RunWasm, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "RunWasm")
				return
			}
		case "bin":
			z.Binary, err = dc.ReadBytes(z.Binary)
			if err != nil {
				err = msgp.WrapError(err, "Binary")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MyNote) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "id"
	err = en.Append(0x84, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	// write "run"
	err = en.Append(0xa3, 0x72, 0x75, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.RunWasm)
	if err != nil {
		err = msgp.WrapError(err, "RunWasm")
		return
	}
	// write "bin"
	err = en.Append(0xa3, 0x62, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Binary)
	if err != nil {
		err = msgp.WrapError(err, "Binary")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MyNote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "id"
	o = append(o, 0x84, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Message)
	// string "run"
	o = append(o, 0xa3, 0x72, 0x75, 0x6e)
	o = msgp.AppendBool(o, z.RunWasm)
	// string "bin"
	o = append(o, 0xa3, 0x62, 0x69, 0x6e)
	o = msgp.AppendBytes(o, z.Binary)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MyNote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "msg":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "run":
			z.RunWasm, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RunWasm")
				return
			}
		case "bin":
			z.Binary, bts, err = msgp.ReadBytesBytes(bts, z.Binary)
			if err != nil {
				err = msgp.WrapError(err, "Binary")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MyNote) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 4 + msgp.StringPrefixSize + len(z.Message) + 4 + msgp.BoolSize + 4 + msgp.BytesPrefixSize + len(z.Binary)
	return
}
